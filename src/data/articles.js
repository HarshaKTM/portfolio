export const initialArticles = [
  {
    id: 1,
    title: "Getting Started with DevOps: A Comprehensive Guide",
    excerpt: "Learn the fundamental concepts of DevOps and how to implement them in your development workflow...",
    content: `
      <h2>Introduction to DevOps</h2>
      <p>DevOps is a set of practices that combines software development (Dev) and IT operations (Ops). It aims to shorten the systems development life cycle and provide continuous delivery with high software quality.</p>

      <h2>Key DevOps Practices</h2>
      <p>1. Continuous Integration (CI)<br>
      CI is the practice of automating the integration of code changes from multiple contributors into a single software project.</p>

      <p>2. Continuous Delivery (CD)<br>
      CD is a software engineering approach in which teams produce software in short cycles, ensuring that the software can be reliably released at any time.</p>

      <p>3. Infrastructure as Code<br>
      Managing and provisioning infrastructure through code instead of manual processes.</p>

      <h2>Essential DevOps Tools</h2>
      <p>• Jenkins for CI/CD pipelines<br>
      • Docker for containerization<br>
      • Kubernetes for container orchestration<br>
      • Terraform for infrastructure as code</p>
    `,
    category: "DevOps",
    readTime: "8 min read",
    date: "2024-03-15",
    image: "/images/1.png"
  },
  {
    id: 2,
    title: "Modern Full Stack Development with Next.js",
    excerpt: "Explore the power of Next.js for building full-stack applications with React and Node.js...",
    content: `
      <h2>Why Next.js?</h2>
      <p>Next.js is a powerful React framework that enables features like server-side rendering and static site generation.</p>

      <h2>Key Features</h2>
      <p>1. Server-Side Rendering<br>
      Pre-render pages on the server for better performance and SEO.</p>

      <p>2. API Routes<br>
      Create API endpoints easily within your Next.js application.</p>

      <p>3. File-System Routing<br>
      Simple and intuitive routing based on your file structure.</p>

      <h2>Building Modern Applications</h2>
      <p>Learn how to create full-stack applications using Next.js, incorporating:</p>
      <p>• Database integration<br>
      • Authentication<br>
      • API development<br>
      • Deployment strategies</p>
    `,
    category: "Web Development",
    readTime: "10 min read",
    date: "2024-03-10",
    image: "/images/articles/nextjs.jpg"
  },
  {
    id: 3,
    title: "Docker: Basic to Advanced Concepts 2024",
    excerpt: "A comprehensive guide to Docker concepts from basic to advanced, covering everything you need to know about containerization...",
    content: `
      <h2>Comprehensive Guide to Docker Concepts</h2>
      <p>Docker has revolutionized how we develop, ship, and run applications. It provides an open platform for developers and system administrators to build, ship, and run distributed applications on any system.</p>

      <h2>Docker Networking</h2>
      <p>Docker networking allows containers to communicate with each other and with external networks. It provides multiple networking modes:</p>
      <p>• Bridge: The default mode, where containers connect to a private internal network on the host.<br>
      • Host: Removes network isolation between the container and the Docker host.<br>
      • None: Disables all networking for the container.<br>
      • Overlay: Enables swarm services to communicate with each other across nodes.<br>
      • Macvlan: Assigns a MAC address to each container, making them appear as physical devices on the network.</p>

      <h2>Docker Volumes</h2>
      <p>Docker volumes are used to persist data generated by and used by Docker containers. Types include:</p>
      <p>• Named Volumes: Created and managed by Docker, stored in a specific location on the host.<br>
      • Anonymous Volumes: Created when no name is specified, usually for temporary storage.<br>
      • Host Volumes: Bind mounts that link specific paths on the host filesystem to paths in the container.</p>

      <h2>Docker Compose</h2>
      <p>Docker Compose is a tool for defining and running multi-container Docker applications. With a docker-compose.yml file, you can specify services, networks, and volumes.</p>
    `,
    category: "DevOps",
    readTime: "15 min read",
    date: "2024-10-08",
    image: "/images/articles/docker.jpg",
    url: "https://dev.to/prodevopsguytech/docker-basic-to-advanced-concepts-2024-5aa9"
  },
  {
    id: 4,
    title: "Unleashing the Power of DevOps: Transforming Collaboration and Efficiency",
    excerpt: "Discover how DevOps bridges the gap between development and operations teams to enhance software delivery speed and quality...",
    content: `
      <h2>The Core of DevOps: Collaboration</h2>
      <p>At the heart of DevOps is the principle of collaboration. Traditional development and operations teams often worked in silos, leading to miscommunication, delays, and a lack of alignment on business goals. DevOps breaks down these barriers by encouraging continuous communication, shared responsibilities, and a unified approach to achieving business objectives.</p>

      <p>Collaboration in a DevOps environment means that developers and operations teams work together from the initial stages of a project through to deployment and beyond. This integrated approach ensures that both teams have a clear understanding of the requirements, potential challenges, and the desired outcomes.</p>

      <h2>Automation: The Catalyst for Efficiency</h2>
      <p>While collaboration is the cornerstone of DevOps, automation is the engine that drives its efficiency. In a traditional software development environment, manual processes often slow down the release cycle, introduce errors, and increase operational costs. DevOps tackles these challenges by automating repetitive tasks, from code integration and testing to deployment and monitoring.</p>

      <p>Automation tools like continuous integration/continuous deployment (CI/CD) pipelines, infrastructure as code (IaC), and automated testing frameworks allow teams to streamline their workflows, reduce manual intervention, and ensure that code changes are thoroughly tested before reaching production.</p>

      <h2>Transforming the Development Lifecycle</h2>
      <p>The adoption of DevOps practices transforms the software development lifecycle in several key ways:</p>
      <p>• Continuous Integration and Continuous Delivery (CI/CD): With CI/CD pipelines, code changes are automatically integrated, tested, and deployed to production environments.<br>
      • Infrastructure as Code (IaC): By managing infrastructure through code, teams can automate the provisioning and configuration of resources.</p>
    `,
    category: "DevOps",
    readTime: "12 min read",
    date: "2024-09-06",
    image: "/images/articles/devops-collaboration.jpg",
    url: "https://dev.to/kubeha_18/unleashing-the-power-of-devops-transforming-collaboration-and-efficiency-31m2"
  },
  {
    id: 5,
    title: "DevOps: Streamlining Software Development and IT Operations",
    excerpt: "An in-depth look at how DevOps practices enhance collaboration between development and operations teams...",
    content: `
      <h2>Introduction</h2>
      <p>DevOps, a portmanteau of "development" and "operations," is a set of practices, principles, and cultural philosophies aimed at enhancing collaboration between software development (Dev) and IT operations (Ops) teams. The main goal of DevOps is to shorten the software development lifecycle, increase the frequency of software releases, and improve the quality and reliability of software applications.</p>

      <h2>Key Principles of DevOps</h2>
      <p>• Collaboration: DevOps encourages close collaboration and communication between development and operations teams.<br>
      • Automation: Automation plays a crucial role in DevOps by reducing manual errors and speeding up processes.<br>
      • Continuous Integration (CI): CI involves integrating code changes into a shared repository multiple times a day.<br>
      • Continuous Delivery (CD): CD extends CI by automating the deployment process.<br>
      • Infrastructure as Code (IaC): IaC ensures consistent and repeatable infrastructure provisioning.<br>
      • Monitoring and Feedback: DevOps emphasizes continuous monitoring of applications and infrastructure.<br>
      • Microservices: DevOps aligns well with the microservices architectural style.</p>

      <h2>Benefits of DevOps</h2>
      <p>• Faster Time-to-Market: DevOps practices enable faster software development and deployment.<br>
      • Improved Collaboration: The collaborative nature of DevOps promotes better understanding between teams.<br>
      • Higher Quality Software: Automation and continuous testing help identify and fix bugs early.<br>
      • Increased Reliability: Automated deployment processes enhance the reliability of software applications.<br>
      • Scalability: DevOps practices support the seamless scaling of applications.<br>
      • Cost Efficiency: By automating tasks and improving efficiency, DevOps can lead to reduced operational costs.</p>
    `,
    category: "DevOps",
    readTime: "10 min read",
    date: "2024-08-30",
    image: "/images/articles/devops-streamlining.jpg",
    url: "https://dev.to/paniya/devops-streamlining-software-development-and-it-operations-17nn"
  },
  {
    id: 6,
    title: "DevOps Road Map",
    excerpt: "A step-by-step roadmap to becoming a DevOps Engineer, written in a mix of Sinhala and English for better understanding...",
    content: `
      <h2>A Roadmap to Becoming a DevOps Engineer</h2>
      <p>Hello මම අද ඔබට ගෙන එන්නේ DevOps ගැන step-by-step roadmap එකක්. DevOps කියන්නේ IT industry එකේ ඉතාමත් ඉල්ලුමක් ඇති field එකක්. Software development (Dev) සහ IT operations (Ops) එකතු කරලා high-quality software ඉක්මනින් deliver කරන culture එකක් තමයි DevOps කියන්නේ. So, if you're someone who wants to kickstart a career in DevOps, මේ roadmap එක follow කරලා බලන්න.</p>

      <h2>Step 1: Basics ඉගෙන ගන්න (Foundation Skills)</h2>
      <p>DevOps journey එක start කරන්න කලින්, ඔබට basic IT skills ටිකක් ඕනේ. Programming language එකක් ඉගෙන ගන්න—Python හෝ Go වගේ භාෂාවක් ගොඩක් suitable වෙනවා මොකද ඒවා easy-to-learn සහ DevOps automation වලට ගොඩක් භාවිතා වෙනවා.</p>
      <p>Next, Linux basics ටිකක් ඉගෙන ගන්න. Linux කියන්නේ DevOps world එකේ backbone එක වගේ. Commands වගේ ls, cd, mkdir වගේ ඒවා තේරුම් ගන්න ඕනේ. මේක ඔබේ server management skills improve කරනවා.</p>

      <h2>Step 2: Version Control ඉගෙන ගන්න (Git & GitHub)</h2>
      <p>Code manage කරන්න ඉගෙන ගන්න ඕනේ නම් Git තමයි best tool එක. GitHub වගේ platform එකක account එකක් හදලා, git clone, git commit, git push වගේ commands practice කරන්න. කෝඩ් එක track කරන විදිය ඉගෙන ගන්න—team එකක් එක්ක collaborate කරන්න ඕනේ නම් මේක must.</p>

      <h2>Step 3: Networking Basics</h2>
      <p>Networking ගැන basic idea එකක් තියෙන්න ඕනේ. IP addresses, DNS, firewalls වගේ concepts තේරුම් ගන්න. DevOps Engineer කෙනෙක් විදිහට servers communicate කරන විදිහ ඔබට තේරෙන්න ඕනේ. Network එක කොහොමද වැඩ කරන්නේ කියලා ටිකක් හොයලා බලන්න.</p>

      <h2>Step 4: Automation Tools</h2>
      <p>Automation තමයි DevOps වල heart එක. Tools වගේ Ansible, Jenkins, Terraform ඉගෙන ගන්න. Ansible use කරලා server configurations automate කරන්න පුළුවන්. Jenkins වලින් CI/CD pipelines build කරන්න පුළුවන්—Continuous Integration සහ Continuous Deployment කියන්නේ software delivery ඉක්මනින් කරන process එකක්. මේ tools ඉගෙන ගත්තම ඔබේ වැඩ ලේසි වෙනවා. Terraform is an Infrastructure as Code (IaC) that can to use Manage infrastracture declaritive way.</p>

      <h2>Step 5: Containerization with Docker</h2>
      <p>Docker කියන්නේ applications portable කරන්න use වෙන tool එකක්. Containers ගැන ඉගෙන ගන්න—docker build, docker run වගේ commands try කරලා බලන්න. Docker එකෙන් app එක pack කරලා ඕනෑම server එකක run කරන්න පුළුවන්.</p>

      <h2>Step 6: Orchestration with Kubernetes</h2>
      <p>Docker containers manage කරන්න Kubernetes (K8s) ඉගෙන ගන්න. K8s එකෙන් large-scale applications deploy කරන එක automate වෙනවා.</p>

      <h2>Step 7: Cloud Platforms</h2>
      <p>AWS, Azure, හෝ Google Cloud වගේ cloud platform එකක් ඉගෙන ගන්න. Cloud එකේ servers manage කරන එක DevOps Engineer කෙනෙක්ට must-have skill එකක්. Cloud එකේ වැඩ කරන විදිහ ටිකක් practice කරන්න.</p>

      <h2>Step 8: Monitoring & Logging</h2>
      <p>Software production එකේ ගියාම issues track කරන්න monitoring tools ඕනේ. Prometheus සහ Grafana වගේ tools ඉගෙන ගන්න. Logs analyze කරලා app performance improve කරන්න පුළුවන්. App එකේ health එක බලන්න මේ tools use කරන්න.</p>

      <h2>Step 9: Hands-On Projects</h2>
      <p>Theory එක විතරක් ඇති නෑ—practical experience ඕනේ. Small project එකක් start කරන්න. උදාහරණයක් විදිහට, simple web app එකක් Dockerize කරලා AWS එකේ deploy කරලා බලන්න. Get experience.</p>

      <h2>Step 10: Certifications & Job Hunting</h2>
      <p>AWS Certified DevOps Engineer, Kubernetes Certified Administrator (CKA) වගේ certifications ගන්න. LinkedIn profile එක update කරලා, GitHub එකේ projects showcase කරන්න. Certification එකකින් ඔබේ skills prove කරන්න—job එකක් හොයාගන්න ලේසි වෙයි.</p>

      <h2>Final Thoughts</h2>
      <p>DevOps journey එක long එකක්, but worth it! 2025 වෙද්දි DevOps Engineers ලට demand තවත් වැඩි වෙයි. මේ මාර්ගය follow කළොත් ඔබත් DevOps pro එකෙක් වෙයි. Keep learning, stay curious, and automate everything you can!</p>
    `,
    category: "DevOps",
    readTime: "8 min read",
    date: "2025-03-05",
    image: "/images/articles/devops-roadmap.jpg",
    url: "https://www.linkedin.com/pulse/devops-road-map-harsha-k-thennakoon-jtv4c/"
  }
]; 